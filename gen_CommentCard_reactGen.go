// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

type CommentCardElem struct {
	react.Element
}

func (c *CommentCardElem) RendersLi(*react.LiElem) {}

func (c *CommentCardElem) noop() {
	var v CommentCardDef
	r := v.Render()

	v.RendersLi(r)
}

func buildCommentCard(cd react.ComponentDef) react.Component {
	return CommentCardDef{ComponentDef: cd}
}

func buildCommentCardElem(props CommentCardProps, children ...react.Element) *CommentCardElem {
	return &CommentCardElem{
		Element: react.CreateElement(buildCommentCard, props, children...),
	}
}

func (c CommentCardDef) RendersElement() react.Element {
	return c.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// CommentCard component.  SetState does not immediately mutate c.State()
// but creates a pending state transition.
func (c CommentCardDef) SetState(state CommentCardState) {
	c.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the CommentCard component
func (c CommentCardDef) State() CommentCardState {
	return c.ComponentDef.State().(CommentCardState)
}

// IsState is an auto-generated definition so that CommentCardState implements
// the myitcv.io/react.State interface.
func (c CommentCardState) IsState() {}

var _ react.State = CommentCardState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (c CommentCardDef) GetInitialStateIntf() react.State {
	return c.GetInitialState()
}

func (c CommentCardState) EqualsIntf(val react.State) bool {
	return c.Equals(val.(CommentCardState))
}

// IsProps is an auto-generated definition so that CommentCardProps implements
// the myitcv.io/react.Props interface.
func (c CommentCardProps) IsProps() {}

// Props is an auto-generated proxy to the current props of CommentCard
func (c CommentCardDef) Props() CommentCardProps {
	uprops := c.ComponentDef.Props()
	return uprops.(CommentCardProps)
}

func (c CommentCardProps) EqualsIntf(val react.Props) bool {
	return c.Equals(val.(CommentCardProps))
}

var _ react.Props = CommentCardProps{}
